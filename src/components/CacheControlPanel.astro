---
import { cacheManager } from '../lib/cache-manager';

// Get cache info on the server side
let initialCacheInfo = { totalSize: 0, caches: [] };
let storageInfo = { used: 0, available: 0, total: 0, usagePercentage: 0 };
let offlineCaps = { isSupported: false, isOnline: true, hasServiceWorker: false, cachesCount: 0 };
---

<div class="bg-white rounded-lg shadow-lg p-6" role="region" aria-label="Cache Control Panel">
  <h2 class="text-2xl font-bold text-purple-800 mb-6">Önbellek Yönetimi</h2>

  <!-- Network Status -->
  <div class="mb-6">
    <h3 class="text-lg font-semibold text-gray-700 mb-3">Ağ Durumu</h3>
    <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
      <div class="bg-gray-50 rounded-lg p-3">
        <div class="text-sm text-gray-600">Destek</div>
        <div id="cache-supported" class="text-lg font-semibold text-gray-800">
          {offlineCaps.isSupported ? '✅ Evet' : '❌ Hayır'}
        </div>
      </div>
      <div class="bg-gray-50 rounded-lg p-3">
        <div class="text-sm text-gray-600">Çevrimiçi</div>
        <div id="network-status" class="text-lg font-semibold text-green-600">
          {offlineCaps.isOnline ? '✅ Evet' : '❌ Hayır'}
        </div>
      </div>
      <div class="bg-gray-50 rounded-lg p-3">
        <div class="text-sm text-gray-600">Service Worker</div>
        <div id="sw-status" class="text-lg font-semibold text-gray-800">
          {offlineCaps.hasServiceWorker ? '✅ Aktif' : '❌ Kapalı'}
        </div>
      </div>
      <div class="bg-gray-50 rounded-lg p-3">
        <div class="text-sm text-gray-600">Önbellek Sayısı</div>
        <div id="cache-count" class="text-lg font-semibold text-gray-800">
          {initialCacheInfo.caches.length}
        </div>
      </div>
    </div>
  </div>

  <!-- Storage Information -->
  <div class="mb-6">
    <h3 class="text-lg font-semibold text-gray-700 mb-3">Depolama Bilgisi</h3>
    <div class="bg-gray-50 rounded-lg p-4">
      <div class="flex justify-between items-center mb-2">
        <span class="text-sm text-gray-600">Kullanılan Alan</span>
        <span id="storage-used" class="text-sm font-semibold text-gray-800">
          {formatBytes(storageInfo.used)}
        </span>
      </div>
      <div class="w-full bg-gray-200 rounded-full h-2 mb-2">
        <div
          id="storage-bar"
          class="bg-purple-600 h-2 rounded-full transition-all duration-300"
          style="width: ${storageInfo.usagePercentage}%"
        ></div>
      </div>
      <div class="flex justify-between text-xs text-gray-500">
        <span>0</span>
        <span id="storage-total">{formatBytes(storageInfo.total)}</span>
      </div>
    </div>
  </div>

  <!-- Cache Information -->
  <div class="mb-6">
    <h3 class="text-lg font-semibold text-gray-700 mb-3">Önbellek Detayları</h3>
    <div class="space-y-3" id="cache-details">
      {initialCacheInfo.caches.map(cache => (
        <div class="bg-gray-50 rounded-lg p-3 flex justify-between items-center">
          <div>
            <div class="font-medium text-gray-800">{cache.name}</div>
            <div class="text-sm text-gray-600">{cache.entries} girdi</div>
          </div>
          <div class="text-right">
            <div class="font-semibold text-gray-800">{formatBytes(cache.size)}</div>
            <button
              onclick="clearCache('${cache.name}')"
              class="text-xs text-red-600 hover:text-red-800 mt-1"
            >
              Temizle
            </button>
          </div>
        </div>
      ))}
    </div>
  </div>

  <!-- Actions -->
  <div class="space-y-3">
    <h3 class="text-lg font-semibold text-gray-700 mb-3">İşlemler</h3>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
      <button
        onclick="clearAllCaches()"
        class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition-colors"
      >
        Tüm Önbelleği Temizle
      </button>
      <button
        onclick="checkForUpdates()"
        class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
      >
        Güncelleme Kontrol Et
      </button>
      <button
        onclick="preloadCriticalAssets()"
        class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition-colors"
      >
        Kritik Öğeleri Yükle
      </button>
      <button
        onclick="refreshAllPages()"
        class="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition-colors"
      >
        Tüm Sayfaları Yenile
      </button>
      <button
        onclick="requestPersistentStorage()"
        class="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700 transition-colors"
      >
        Kalıcı Depolama İste
      </button>
      <button
        onclick="refreshCacheInfo()"
        class="bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 transition-colors"
      >
        Bilgileri Yenile
      </button>
    </div>
  </div>

  <!-- Status Messages -->
  <div id="cache-status" class="mt-4 hidden" role="status" aria-live="polite"></div>
</div>

<script>
  // Initialize cache manager
  const cm = cacheManager;

  // Format bytes to human readable format
  function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';

    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  }

  // Show status message
  function showStatus(message, type = 'info') {
    const statusDiv = document.getElementById('cache-status');
    statusDiv.className = `mt-4 p-3 rounded-md ${
      type === 'success' ? 'bg-green-100 text-green-700' :
      type === 'error' ? 'bg-red-100 text-red-700' :
      type === 'warning' ? 'bg-yellow-100 text-yellow-700' :
      'bg-blue-100 text-blue-700'
    }`;
    statusDiv.textContent = message;
    statusDiv.classList.remove('hidden');

    setTimeout(() => {
      statusDiv.classList.add('hidden');
    }, 5000);
  }

  // Update cache information
  async function updateCacheInfo() {
    try {
      const [cacheInfo, storageInfo, offlineCaps] = await Promise.all([
        cm.getCacheInfo(),
        cm.estimateStorage(),
        Promise.resolve(cm.getOfflineCapabilities())
      ]);

      // Update storage info
      document.getElementById('storage-used').textContent = formatBytes(storageInfo.used);
      document.getElementById('storage-total').textContent = formatBytes(storageInfo.total);
      document.getElementById('storage-bar').style.width = `${storageInfo.usagePercentage}%`;

      // Update cache details
      const cacheDetails = document.getElementById('cache-details');
      cacheDetails.innerHTML = cacheInfo.caches.map(cache => `
        <div class="bg-gray-50 rounded-lg p-3 flex justify-between items-center">
          <div>
            <div class="font-medium text-gray-800">${cache.name}</div>
            <div class="text-sm text-gray-600">${cache.entries} girdi</div>
          </div>
          <div class="text-right">
            <div class="font-semibold text-gray-800">${formatBytes(cache.size)}</div>
            <button
              onclick="clearCache('${cache.name}')"
              class="text-xs text-red-600 hover:text-red-800 mt-1"
            >
              Temizle
            </button>
          </div>
        </div>
      `).join('');

      // Update network status
      document.getElementById('cache-count').textContent = cacheInfo.caches.length;
    } catch (error) {
      console.error('Error updating cache info:', error);
      showStatus('Önbellek bilgileri güncellenirken hata oluştu', 'error');
    }
  }

  // Clear specific cache
  async function clearCache(cacheName) {
    try {
      const success = await cm.clearCache(cacheName);
      if (success) {
        showStatus(`${cacheName} önbelleği temizlendi`, 'success');
        updateCacheInfo();
      } else {
        showStatus(`${cacheName} önbelleği temizlenemedi`, 'error');
      }
    } catch (error) {
      showStatus('Önbellek temizlenirken hata oluştu', 'error');
    }
  }

  // Clear all caches
  async function clearAllCaches() {
    if (!confirm('Tüm önbellekleri temizlemek istediğinizden emin misiniz?')) {
      return;
    }

    try {
      const success = await cm.clearAllCaches();
      if (success) {
        showStatus('Tüm önbellekler temizlendi', 'success');
        updateCacheInfo();
      } else {
        showStatus('Önbellekler temizlenemedi', 'error');
      }
    } catch (error) {
      showStatus('Önbellekler temizlenirken hata oluştu', 'error');
    }
  }

  // Check for updates
  async function checkForUpdates() {
    try {
      const success = await cm.checkForUpdates();
      if (success) {
        showStatus('Güncelleme kontrol ediliyor...', 'info');
      } else {
        showStatus('Güncelleme kontrol edilemedi', 'error');
      }
    } catch (error) {
      showStatus('Güncelleme kontrol edilirken hata oluştu', 'error');
    }
  }

  // Preload critical assets
  async function preloadCriticalAssets() {
    const criticalUrls = [
      '/',
      '/logo-black.svg',
      '/logo-white.svg',
      '/manifest.json',
      '/fonts/*'
    ];

    try {
      await cm.preloadUrls(criticalUrls);
      showStatus('Kritik öğeler önbelleğe yüklendi', 'success');
      updateCacheInfo();
    } catch (error) {
      showStatus('Kritik öğeler yüklenirken hata oluştu', 'error');
    }
  }

  // Refresh all pages
  async function refreshAllPages() {
    try {
      const cacheInfo = await cm.getCacheInfo();
      const refreshPromises = cacheInfo.caches.map(cache => cm.clearCache(cache.name));
      await Promise.all(refreshPromises);
      showStatus('Tüm sayfaların önbelleği temizlendi', 'success');
      updateCacheInfo();
    } catch (error) {
      showStatus('Sayfalar yenilenirken hata oluştu', 'error');
    }
  }

  // Request persistent storage
  async function requestPersistentStorage() {
    try {
      const isPersistent = await cm.requestPersistentStorage();
      if (isPersistent) {
        showStatus('Kalıcı depolama izni verildi', 'success');
      } else {
        showStatus('Kalıcı depolama izni alınamadı', 'warning');
      }
    } catch (error) {
      showStatus('Depolama izni istenirken hata oluştu', 'error');
    }
  }

  // Refresh cache info
  async function refreshCacheInfo() {
    try {
      await updateCacheInfo();
      showStatus('Bilgiler güncellendi', 'success');
    } catch (error) {
      showStatus('Bilgiler güncellenirken hata oluştu', 'error');
    }
  }

  // Network status monitoring
  cm.setupNetworkMonitoring();

  // Listen for network status changes
  window.addEventListener('network-status-changed', (event) => {
    const isOnline = event.detail.online;
    const statusElement = document.getElementById('network-status');
    statusElement.textContent = isOnline ? '✅ Evet' : '❌ Hayır';
    statusElement.className = `text-lg font-semibold ${isOnline ? 'text-green-600' : 'text-red-600'}`;
  });

  // Listen for service worker updates
  window.addEventListener('sw-update-available', () => {
    showStatus('Yeni güncelleme mevcut! Sayfayı yenileyerek güncelleyin.', 'warning');
  });

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', async () => {
    // Register service worker if not already registered
    await cm.registerServiceWorker();

    // Update initial cache info
    await updateCacheInfo();

    // Setup periodic cache info updates
    setInterval(updateCacheInfo, 30000); // Update every 30 seconds
  });
</script>