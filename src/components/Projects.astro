---
// Projects.astro - Projelerimiz (Projects) section component
import { getCurrentLanguage, getTranslation, getTranslations } from '../lib/i18n';
import { translations } from '../lib/translations';

const currentLang = getCurrentLanguage(Astro);
const t = (key: string) => getTranslation(translations, currentLang, key);
const translationsObj = getTranslations(currentLang);

const projectCardsConfig = [
  {
    key: 'robot2025',
    icon: 'fas fa-robot',
    gradient: 'from-primary to-secondary',
    tagClasses: ['bg-primary', 'bg-secondary', 'bg-accent']
  },
  {
    key: 'outreach',
    icon: 'fas fa-users',
    gradient: 'from-secondary to-accent',
    tagClasses: ['bg-primary', 'bg-secondary']
  },
  {
    key: 'junior',
    icon: 'fas fa-graduation-cap',
    gradient: 'from-accent to-primary',
    tagClasses: ['bg-primary', 'bg-secondary']
  },
  {
    key: 'robot2024',
    icon: 'fas fa-cog',
    gradient: 'from-primary to-secondary',
    tagClasses: ['bg-primary', 'bg-secondary', 'bg-accent']
  },
  {
    key: 'website',
    icon: 'fas fa-code',
    gradient: 'from-secondary to-accent',
    tagClasses: ['bg-primary', 'bg-secondary']
  },
  {
    key: 'sponsorship',
    icon: 'fas fa-handshake',
    gradient: 'from-accent to-primary',
    tagClasses: ['bg-primary', 'bg-secondary']
  }
] as const;

const cardsTranslations = (translationsObj.projects?.cards ?? {}) as Record<string, any>;

const projectCardData = projectCardsConfig.map(card => {
  const content = cardsTranslations[card.key] ?? {};
  const tags = Array.isArray(content.tags) ? content.tags : [];
  return { ...card, content, tags };
});
---

<section id="projelerimiz" class="pt-32 pb-20 bg-gray-50 scroll-mt-24">
  <div class="container mx-auto px-4">
    <h2 class="text-4xl font-bold text-center text-gray-800 mb-16">{t('projects.title')}</h2>
    <div class="max-w-6xl mx-auto">

      <!-- Project Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {projectCardData.map((card) => (
          <div class="glass-card overflow-hidden">
            <div class="relative h-48 bg-primary">
              <div class="absolute inset-0 flex items-center justify-center">
                <i class={`${card.icon} text-6xl text-white`}></i>
              </div>
            </div>
            <div class="p-6">
              <h3 class="text-xl font-bold text-gray-800 mb-3">{card.content.title}</h3>
              <p class="text-gray-600 mb-4">{card.content.description}</p>
              <div class="flex flex-wrap gap-2 mb-4">
                {card.tags.map((tag: string, index: number) => (
                  <span class={`${card.tagClasses[index] ?? 'bg-primary'} text-white px-3 py-1 rounded-full text-sm`}>{tag}</span>
                ))}
              </div>
              <div class="flex justify-between items-center">
                <span class="text-sm text-gray-500">{card.content.meta}</span>
                <button class="text-primary hover:text-secondary transition-colors" aria-label={card.content.title}>
                  <i class="fas fa-external-link-alt"></i>
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- Call to Action -->
      <div class="text-center mt-16">
        <h3 class="text-2xl font-bold text-gray-800 mb-4">{t('projects.cta_title')}</h3>
        <p class="text-lg text-gray-600 mb-8 max-w-3xl mx-auto">
          {t('projects.cta_description')}
        </p>
        <button class="bg-gradient-to-r from-primary to-secondary text-white px-8 py-3 rounded-full hover:from-secondary hover:to-accent transition-all duration-300 transform hover:scale-105" onclick="scrollWindowTo('iletisim')">
          {t('projects.cta_button')}
        </button>
      </div>

    </div>
  </div>
</section>
