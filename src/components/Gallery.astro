---
import { Image } from 'astro:assets';
import { getCurrentLanguage, getTranslation } from '../lib/i18n';
import { translations } from '../lib/translations';
import galleryData from '../data/gallery-data.json';

const currentLang = getCurrentLanguage(Astro);
const t = (key: string) => getTranslation(translations, currentLang, key);

// TypeScript declarations for global variables
declare global {
  interface Window {
    Fancybox: any;
  }
}

// Import all gallery images dynamically
const galleryImages = import.meta.glob<{ default: ImageMetadata }>('/public/img/gallery/*.{jpg,jpeg,png,JPG,JPEG,PNG}');

// Create a filename to image mapping
const imageMap = new Map();
await Promise.all(
  Object.entries(galleryImages).map(async ([path, imageModule]) => {
    const image = await imageModule();
    const filename = path.split('/').pop() || '';
    imageMap.set(filename, image.default);
  })
);

// Process gallery items with available data
const galleryItemsData = await Promise.all(
  galleryData.galleryItems.map(async (item, index) => {
    const imageSrc = imageMap.get(item.filename);
    if (!imageSrc) {
      console.warn(`Image not found: ${item.filename}`);
      return null;
    }

    return {
      key: `gallery-${index}`,
      src: imageSrc,
      full: imageSrc,
      filename: item.filename,
      title: item.title[currentLang] || item.title.tr || `Gallery Image ${index + 1}`,
      subtitle: item.subtitle[currentLang] || item.subtitle.tr || item.category,
      category: item.category
    };
  })
);

// Filter out null items (images not found)
const validGalleryItems = galleryItemsData.filter(item => item !== null);
---

<section id="galeri" class="pt-32 pb-20 scroll-mt-24">
  <div class="container mx-auto px-4">
    <h2 class="text-4xl font-bold text-center text-gray-800 mb-16">{t('gallery.title')}</h2>
    <div class="max-w-6xl mx-auto">

      <!-- Gallery Filter -->
      <div class="flex flex-wrap justify-center gap-4 mb-12">
        <button class="gallery-filter active bg-primary glass-nav-item text-white" data-filter="*">
          {t('gallery.all')}
        </button>
        <button class="gallery-filter bg-gray-200 glass-nav-item text-gray-700" data-filter=".robots">
          {t('gallery.robots')}
        </button>
        <button class="gallery-filter bg-gray-200 glass-nav-item text-gray-700" data-filter=".team">
          {t('gallery.team')}
        </button>
        <button class="gallery-filter bg-gray-200 glass-nav-item text-gray-700" data-filter=".competitions">
          {t('gallery.competitions')}
        </button>
        <button class="gallery-filter bg-gray-200 glass-nav-item text-gray-700" data-filter=".outreach">
          {t('gallery.outreach')}
        </button>
      </div>

      <!-- Gallery Grid -->
      <div class="gallery-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        {validGalleryItems.map((item) => (
          <div class={`gallery-item ${item.category}`}>
            <a href={`/img/gallery/${item.filename}`} data-fancybox="gallery" data-caption={`${item.title} - ${item.subtitle}`}>
              <div class="relative overflow-hidden rounded-lg shadow-lg hover:shadow-xl transition-shadow duration-300 group">
                <Image
                  src={item.src}
                  alt={`${item.title} - ${item.subtitle}`}
                  width={400}
                  height={300}
                  loading="lazy"
                  class="w-full h-64 object-cover group-hover:scale-110 transition-transform duration-500"
                  format="webp"
                  quality={80}
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                  <div class="absolute bottom-4 left-4 text-white">
                    <h4 class="font-bold">{item.title}</h4>
                    <p class="text-sm">{item.subtitle}</p>
                  </div>
                  <div class="absolute top-4 right-4 text-white">
                    <i class="fas fa-expand-alt"></i>
                  </div>
                </div>
              </div>
            </a>
          </div>
        ))}
      </div>

      <!-- Gallery Stats -->
      <div class="mt-16 bg-gradient-to-r from-primary to-secondary text-white rounded-lg p-8">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-8 text-center">
          <div>
            <h3 class="text-3xl font-bold mb-2">6+</h3>
            <p class="text-lg">{t('gallery.stats_years')}</p>
          </div>
          <div>
            <h3 class="text-3xl font-bold mb-2">5+</h3>
            <p class="text-lg">{t('gallery.stats_robots')}</p>
          </div>
          <div>
            <h3 class="text-3xl font-bold mb-2">100+</h3>
            <p class="text-lg">{t('gallery.photo')}</p>
          </div>
          <div>
            <h3 class="text-3xl font-bold mb-2">1000+</h3>
            <p class="text-lg">{t('gallery.stats_memories')}</p>
          </div>
        </div>
      </div>

    </div>
  </div>
</section>

<script>
  // Gallery filter functionality with error handling
  document.addEventListener('DOMContentLoaded', function() {
    try {
      const filterButtons = document.querySelectorAll('.gallery-filter');
      const galleryItems = document.querySelectorAll('.gallery-item');

      // Check if elements exist
      if (filterButtons.length === 0 || galleryItems.length === 0) {
        console.warn('Gallery elements not found. Gallery filtering will be disabled.');
        return;
      }

      filterButtons.forEach(button => {
        button.addEventListener('click', function(e: Event) {
          const button = e.currentTarget as HTMLElement;
          try {
            // Remove active class from all buttons
            filterButtons.forEach(btn => {
              btn.classList.remove('active', 'bg-primary', 'text-white');
              btn.classList.add('bg-gray-200', 'text-gray-700');
            });

            // Add active class to clicked button
            button.classList.add('active', 'bg-primary', 'text-white');
            button.classList.remove('bg-gray-200', 'text-gray-700');

            // Get filter value
            const filterValue = button.getAttribute('data-filter');

            // Show/hide gallery items
            galleryItems.forEach((item: Element) => {
              const htmlItem = item as HTMLElement;
              if (filterValue === '*' || (filterValue && item.classList.contains(filterValue.substring(1)))) {
                htmlItem.style.display = 'block';
                setTimeout(() => {
                  htmlItem.style.opacity = '1';
                  htmlItem.style.transform = 'scale(1)';
                }, 10);
              } else {
                htmlItem.style.opacity = '0';
                htmlItem.style.transform = 'scale(0.8)';
                setTimeout(() => {
                  htmlItem.style.display = 'none';
                }, 300);
              }
            });
          } catch (error) {
            console.error('Error in gallery filter click handler:', error);
          }
        });
      });

      // Initialize gallery items with transition
      galleryItems.forEach((item: Element) => {
        (item as HTMLElement).style.transition = 'opacity 0.3s ease, transform 0.3s ease';
      });
    } catch (error) {
      console.error('Error initializing gallery:', error);
    }
  });
</script>
