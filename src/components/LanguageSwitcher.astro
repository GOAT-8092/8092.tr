---
import type { Language } from '../lib/i18n';
import { LANGUAGES, getLocalizedUrl, getCurrentLanguage } from '../lib/i18n';

interface Props {
  currentLang?: Language;
  className?: string;
}

const { currentLang = getCurrentLanguage(Astro), className = '' } = Astro.props;
const currentPath = Astro.url.pathname;
---

<div class={`language-switcher ${className}`}>
  <div class="relative group">
    <button
      id="language-toggle"
      class="flex items-center space-x-2 px-3 py-2 rounded-lg bg-primary text-white hover:bg-secondary transition-all duration-200 border border-primary/50"
      aria-label="Select language"
      aria-expanded="false"
      aria-haspopup="true"
    >
      <span class="text-lg">{LANGUAGES[currentLang].flag}</span>
      <span class="hidden sm:inline text-sm font-medium">{LANGUAGES[currentLang].name}</span>
      <svg class="w-4 h-4 transition-transform group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>

    <div
      id="language-dropdown"
      class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl border border-gray-200 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50"
      role="menu"
    >
      <div class="py-1">
        {(Object.entries(LANGUAGES) as [Language, typeof LANGUAGES[keyof typeof LANGUAGES]][]).map(([lang, config]) => (
          lang !== currentLang && (
            <a
              href={getLocalizedUrl(currentPath, lang)}
              class="flex items-center space-x-3 px-4 py-3 text-sm text-gray-700 hover:bg-gray-50 hover:text-gray-900 transition-colors duration-150"
              role="menuitem"
              lang={lang}
            >
              <span class="text-lg">{config.flag}</span>
              <span class="font-medium">{config.name}</span>
              {lang === currentLang && (
                <svg class="w-4 h-4 ml-auto text-green-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              )}
            </a>
          )
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.getElementById('language-toggle');
    const dropdown = document.getElementById('language-dropdown');

    if (!toggle || !dropdown) {
      return;
    }

    toggle.addEventListener('click', (e) => {
      e.stopPropagation();
      const isOpen = dropdown.classList.contains('opacity-100');

      if (isOpen) {
        closeDropdown();
      } else {
        openDropdown();
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!toggle.contains(e.target) && !dropdown.contains(e.target)) {
        closeDropdown();
      }
    });

    // Close dropdown on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeDropdown();
      }
    });

    function openDropdown() {
      dropdown.classList.remove('opacity-0', 'invisible');
      dropdown.classList.add('opacity-100', 'visible');
      toggle.setAttribute('aria-expanded', 'true');
    }

    function closeDropdown() {
      dropdown.classList.add('opacity-0', 'invisible');
      dropdown.classList.remove('opacity-100', 'visible');
      toggle.setAttribute('aria-expanded', 'false');
    }
  });
</script>
